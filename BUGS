CHROME RELATED BUGS

- As of 6.2.2011, Chrome has an issue w/ cross-origin CSS requests, preventing
the use of the 'cssRules' javascript property (as described here:
http://code.google.com/p/chromium/issues/detail?id=49001). This means that
Alberti is currently unusable in Chrome, though this will theoretically
change once the web deployment scripts are updated (as the scripts will merge
Alberti into a single file, thereby eliminating the cross-origin CSS request).

- Chrome does not allow FileReader to read the contents of local files using
the file:// protocol. Alberti must uploaded to a web server in order for file
importing (File > Open, Import Underlay) to work.

OPERA RELATED BUGS

- As of 6.2.2011, Opera does not support the pointer-events CSS property as 
applied to HTML elements. This means no drag and drop & no menu functionality. 
At this point, I'm officially dropping support for Opera.

- Rendering of lines with crispEdges on is a bit funky when it comes to stroke 
widths with decimal components.

WEBKIT RELATED BUGS

- 7/2/2011. Oddly, deployed Alberti code runs slowly compared to undeployed 
code (i.e. opening working-base.xhtml instead running the output of the deploy 
script). This is evident when using the selection tool--while dragging a 
selection box rapidly around the screen, CPU usage spikes significantly. This 
does not occur w/ undeployed code. It's unclear why this happens considering 
that it occurs regardless of whether or not the deployed code is minified (the 
deploy script simply merges all javascript and CSS into a single file). As 
such, it's best to avoid use of the deployment script and simply run un-merged 
code.

- As of 6/16/2011, the nightly WebKit build (r89055) does not support 
addEventListener for FileReader (as described here: 
http://web.archiveorange.com/archive/v/fwvde2KNIH2OWykfy7Xz). UPDATE 7/2/2011: 
Added a workaround for this awhile back.

- Rather obscure bug, yet someone else has already detailed it in the 
following Bugzilla report: https://bugs.webkit.org/show_bug.cgi?id=53767

GECKO RELATED BUGS

- As of 6/21/2011, Firefox 5 crashes when attempting to display a popup via
window.open() with a large data URL (i.e. containing a large base64-encoded 
image). Because of this, underlay images are no longer saved with Alberti 
documents by default.

SVG RELATED BUGS

Line rendering issue:

- Visual artifacts along objects' bounding borders generated by neighboring 
lines. These are difficult to reproduce but only seem to appear with 
anti-aliasing activated.

- Visual artifacts along long lines of single-pixel width, with 
shape-rendering set to "crispEdges". Black pixels appear along the line, 
particularly for shallow lines close to horizontal.

- Long lines of single-pixel width, rendered with shape-rendering set to 
"crispEdges" seem to be affected by some sort of rounding error. This is 
noticeable with the guide line of step 2 of the line tool, particularly at 
large magnifications--the line appears to jump about during zooming. This may 
be exacerbated by the fact that AutoScale reduces the stroke-width to a small 
decimal value at high magnifications. Can be tested by disabling the 
Alberti.nonScalingLinesHack, and using vector-effect set to 
"non-scaling-stroke". UPDATE 5.25.2011: This bug only occurs on lines with 
stroke widths of 1 with shape-rendering set to crispEdges.

- Under WebKit's SVG implementation, instances of the Point template are not 
affected consistently by CSS styles--this is noticeable when rendering 
optimizations are enabled/disabled during panning/zooming. To work around 
this, the Point template has its shape-rendering attribute written directly 
in the base SVG file, thereby overriding any externally applied CSS. In
short, rendering of template objects is never optimized.
