/*
 * DragHandler.js
 * extends EventHandler
 * 
 * A specialized EventListener interface for draggable objects.
 * 
 * USAGE
 * 
 * For an inheriting object to begin "listening" for drag events, you need
 * to register the object as an event listener for "mousedown" events (via
 * addEventListener(). Further, the inheriting class must implement 
 * DragHandler's abstract onDrag method, the arguments of which contain a
 * pair of integers (dx,dy) describing the drag vector in pixels since the
 * last mouse-move event. The onDragBegin and onDrop methods may be
 * implemented optionally.
 * 
 * NOTE
 * 
 * This is entirely separate and distinct from HTML5 drag and drop
 * functionality.
 * 
 * * */
 
function DragHandler() {
	DragHandler.baseConstructor.call(this);
	this.lastX = 0;
	this.lastY = 0;
	this.currentlyDragging = false;
}
Util.extend(DragHandler, EventHandler);

// If dragging is currently taking place, DragHandler::cancelDrag cancels
// dragging, immediately invoking the instance's onDrop method. Otherwise has
// no effect.
DragHandler.prototype.cancelDrag = function() {
	if (this.currentlyDragging) {
		this.currentlyDragging = false;
		window.removeEventListener("mousemove", this, true);
		window.removeEventListener("mouseup", this, true);
		this.onDrop();
	}
};

DragHandler.prototype.mousedown = function(evt) {
	this.updateDragVector(evt);
	this.currentlyDragging = true;

	// Now that dragging has begun, start capturing mousemove and mouseup events
	window.addEventListener("mousemove", this, true);
	window.addEventListener("mouseup", this, true);
	
	this.onDragBegin(evt);
};

DragHandler.prototype.mousemove = function(evt) {
	this.onDrag(evt.clientX - this.lastX, evt.clientY - this.lastY, evt);
	this.updateDragVector(evt);
};

DragHandler.prototype.mouseup = function(evt) {
	// Now that dragging has stopped, stop capturing mouse events
	this.cancelDrag();
};

// evt is the event object generated by the mousedown event.
DragHandler.prototype.onDragBegin = function(evt) {};

// Abstract: Must be implemented by inheriting class. (x,y) describe the drag 
// vector, in pixels, since the last mouse move event. evt is the event object
// generated by the mousemove event.
DragHandler.prototype.onDrag = function(dx, dy, evt) {
	this.cancelDrag();
	throw "Abstract method DragHandler::onDrag not implemented by inheriting class!";
};

// evt is the event object generated by the mouseup event.
DragHandler.prototype.onDrop = function(evt) {};

DragHandler.prototype.updateDragVector = function(evt) {
	this.lastX = evt.clientX;
	this.lastY = evt.clientY;
};
