TODO

- Quadratic bezier tool
- Perspective space tool (3pp, 2pp, 1pp flavors)
- Rapid vanishing point panning via spacebar
- Parallel and perpendicular line tool

CHROME RELATED BUGS

- As of 6.2.2011, Chrome has an issue w/ cross-origin CSS requests, preventing
the use of the 'cssRules' javascript property (as described here:
http://code.google.com/p/chromium/issues/detail?id=49001). This means that
Alberti is currently unusable in Chrome, though this will theoretically
change once the web deployment scripts are updated (as the scripts will merge
Alberti into a single file, thereby eliminating the cross-origin CSS request).

OPERA RELATED BUGS

- As of 6.2.2011, Opera does not support the pointer-events CSS property as 
applied to HTML elements. This means no drag and drop.

- Rendering of lines with crispEdges on is a bit funky when it comes to stroke 
widths with decimal components.

WEBKIT+GECKO SVG RELATED BUGS

Line rendering issue:

- Visual artifacts along objects' bounding borders generated by neighboring 
lines. These are difficult to reproduce but only seem to appear with 
anti-aliasing activated.

- Visual artifacts along long lines of single-pixel width, with 
shape-rendering set to "crispEdges". Black pixels appear along the line, 
particularly for shallow lines close to horizontal.

- Long lines of single-pixel width, rendered with shape-rendering set to 
"crispEdges" seem to be affected by some sort of rounding error. This is 
noticeable with the guide line of step 2 of the line tool, particularly at 
large magnifications--the line appears to jump about during zooming. This may 
be exacerbated by the fact that AutoScale reduces the stroke-width to a small 
decimal value at high magnifications. Can be tested by disabling the 
Alberti.nonScalingLinesHack, and using vector-effect set to 
"non-scaling-stroke". UPDATE 5.25.2011: This bug only occurs on lines with 
stroke widths of 1 with shape-rendering set to crispEdges.

- Under WebKit's SVG implementation, instances of the Point template are not 
affected consistently by CSS styles--this is noticeable when rendering 
optimizations are enabled/disabled during panning/zooming. To work around 
this, the Point template has its shape-rendering attribute written directly 
in the base SVG file, thereby overriding any externally applied CSS. In
short, rendering of template objects is never optimized.

Misc.:

- Rather obscure bug, yet someone else has already detailed it in the 
following Bugzilla report: https://bugs.webkit.org/show_bug.cgi?id=53767
